{
	"info": {
		"_postman_id": "8083308d-5c2a-475c-b794-3c2872cd3ba2",
		"name": "API_Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36785971"
	},
	"item": [
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstname\", firstname)\r",
							"//console.log(firstname)\r",
							"\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastname\", lastname)\r",
							"\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"totalprice\", totalprice)\r",
							"\r",
							"var depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositpaid\", depositpaid)\r",
							"\r",
							"const moment = require(\"moment\")\r",
							"const today = moment()\r",
							"\r",
							"pm.environment.set(\"checkin\", today.format(\"YYYY-MM-DD\"))\r",
							"//pm.environment.set(\"checkin\", today.subtract(5, 'd').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkout\", today.add(7, 'd').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"pm.environment.set(\"additionalneeds\", additionalneeds)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//----------save bookingid an environment--------------------\r",
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"id\", jsonData.bookingid)\r",
							"\r",
							"//---------------Status Code------------------\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"status code is 200 successfully Booked\", function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400 bad request\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401 unauthorized\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403 Forbidden\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404 Not Found\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405 Method not Allowed\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500 Internal Server Error\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501 Not Implemented\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502 Bad Gateway\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503 Service unavailable\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n\t\"lastname\" : \"{{lastname}}\",\r\n\t\"totalprice\" : \"{{totalprice}}\",\r\n\t\"depositpaid\" : \"{{depositpaid}}\",\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Checking Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var getdata = pm.response.json()\r",
							"\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"booking id validation\", function(){\r",
							"    pm.expect(getdata.bookingid).to.eql(pm.environment.get(\"bookingid\"))\r",
							"} )\r",
							"\r",
							"pm.test(\"firstname validation\", function(){\r",
							"    pm.expect(getdata.firstname).to.eql(pm.environment.get(\"firstname\"))\r",
							"})\r",
							"\r",
							"pm.test(\"lastname validation\", function(){\r",
							"    pm.expect(getdata.lastname).to.eql(pm.environment.get(\"lastname\"))\r",
							"})\r",
							"\r",
							"pm.test(\"totalprice validation\", function(){\r",
							"    pm.expect(getdata.totalprice.toString()).to.eql(pm.environment.get(\"totalprice\"))\r",
							"})\r",
							"\r",
							"pm.test(\"depositpaid validation\", function(){\r",
							"    pm.expect(getdata.depositpaid.toString()).to.eql(pm.environment.get(\"depositpaid\"))\r",
							"})\r",
							"\r",
							"pm.test(\"checkin validation\", function(){\r",
							"    pm.expect(getdata.bookingdates.checkin).to.eql(pm.environment.get(\"checkin\"))\r",
							"})\r",
							"\r",
							"pm.test(\"checkout validation\", function(){\r",
							"    pm.expect(getdata.bookingdates.checkout).to.eql(pm.environment.get(\"checkout\"))\r",
							"})\r",
							"\r",
							"pm.test(\"additionalneeds validation\", function(){\r",
							"    pm.expect(getdata.additionalneeds).to.eql(pm.environment.get(\"additionalneeds\"))\r",
							"})\r",
							"\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400 bad request\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401 unauthorized\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403 Forbidden\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404 Not Found\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405 Method not Allowed\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500 Internal Server Error\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501 Not Implemented\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502 Bad Gateway\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503 Service unavailable\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create token for update booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var token = pm.response.json()\r",
							"pm.environment.set(\"token\", token.token)\r",
							"\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"Status code is 200 token created\", function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400 bad request\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401 unauthorized\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403 Forbidden\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404 Not Found\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405 Method not Allowed\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500 Internal Server Error\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501 Not Implemented\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502 Bad Gateway\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503 Service unavailable\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstname\", firstname)\r",
							"//console.log(firstname)\r",
							"\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastname\", lastname)\r",
							"\r",
							"var totalprice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"pm.environment.set(\"totalprice\", totalprice)\r",
							"\r",
							"var depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositpaid\", depositpaid)\r",
							"\r",
							"const moment = require(\"moment\")\r",
							"const today = moment()\r",
							"\r",
							"pm.environment.set(\"checkin\", today.format(\"YYYY-MM-DD\"))\r",
							"//pm.environment.set(\"checkin\", today.subtract(5, 'd').format(\"YYYY-MM-DD\"))\r",
							"pm.environment.set(\"checkout\", today.add(7, 'd').format(\"YYYY-MM-DD\"))\r",
							"\r",
							"var additionalneeds = pm.variables.replaceIn(\"{{$randomProduct}}\")\r",
							"pm.environment.set(\"additionalneeds\", additionalneeds)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"status code is 200 successfully Booked\", function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400 bad request\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401 unauthorized\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403 Forbidden\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404 Not Found\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405 Method not Allowed\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500 Internal Server Error\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501 Not Implemented\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502 Bad Gateway\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503 Service unavailable\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n\t\"lastname\" : \"{{lastname}}\",\r\n\t\"totalprice\" : \"{{totalprice}}\",\r\n\t\"depositpaid\" : \"{{depositpaid}}\",\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Checking After Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var getdata = pm.response.json()\r",
							"\r",
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"booking id validation\", function(){\r",
							"    pm.expect(getdata.bookingid).to.eql(pm.environment.get(\"bookingid\"))\r",
							"} )\r",
							"\r",
							"pm.test(\"firstname validation\", function(){\r",
							"    pm.expect(getdata.firstname).to.eql(pm.environment.get(\"firstname\"))\r",
							"})\r",
							"\r",
							"pm.test(\"lastname validation\", function(){\r",
							"    pm.expect(getdata.lastname).to.eql(pm.environment.get(\"lastname\"))\r",
							"})\r",
							"\r",
							"pm.test(\"totalprice validation\", function(){\r",
							"    pm.expect(getdata.totalprice.toString()).to.eql(pm.environment.get(\"totalprice\"))\r",
							"})\r",
							"\r",
							"pm.test(\"depositpaid validation\", function(){\r",
							"    pm.expect(getdata.depositpaid.toString()).to.eql(pm.environment.get(\"depositpaid\"))\r",
							"})\r",
							"\r",
							"pm.test(\"checkin validation\", function(){\r",
							"    pm.expect(getdata.bookingdates.checkin).to.eql(pm.environment.get(\"checkin\"))\r",
							"})\r",
							"\r",
							"pm.test(\"checkout validation\", function(){\r",
							"    pm.expect(getdata.bookingdates.checkout).to.eql(pm.environment.get(\"checkout\"))\r",
							"})\r",
							"\r",
							"pm.test(\"additionalneeds validation\", function(){\r",
							"    pm.expect(getdata.additionalneeds).to.eql(pm.environment.get(\"additionalneeds\"))\r",
							"})\r",
							"\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400 bad request\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401 unauthorized\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403 Forbidden\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404 Not Found\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405 Method not Allowed\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500 Internal Server Error\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501 Not Implemented\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502 Bad Gateway\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503 Service unavailable\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status = pm.response.code\r",
							"if(status == 200){\r",
							"    pm.test(\"Status code is 200 Booking cannot delete successfully\", function(){\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}else if(status == 201){\r",
							"    pm.test(\"Status code is 201 Booking Deleted successfully\", function(){\r",
							"        pm.response.to.have.status(201);\r",
							"    });\r",
							"}else if(status == 400){\r",
							"    pm.test(\"Status code is 400 bad request\", function(){\r",
							"        pm.response.to.have.status(400);\r",
							"    });\r",
							"}else if (status == 401){\r",
							"    pm.test(\"status code is 401 unauthorized\", function(){\r",
							"        pm.response.to.have.status(401);\r",
							"    });\r",
							"}else if (status == 403){\r",
							"    pm.test(\"status code is 403 Forbidden\", function(){\r",
							"        pm.response.to.have.status(403);\r",
							"    });\r",
							"}else if (status == 404){\r",
							"    pm.test(\"status code is 404 Not Found\", function(){\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"}else if (status == 405){\r",
							"    pm.test(\"status code is 405 Method not Allowed\", function(){\r",
							"        pm.response.to.have.status(405);\r",
							"    });\r",
							"}else if (status == 500){\r",
							"    pm.test(\"status code is 500 Internal Server Error\", function(){\r",
							"        pm.response.to.have.status(500);\r",
							"    });\r",
							"}else if (status == 501){\r",
							"    pm.test(\"status code is 501 Not Implemented\", function(){\r",
							"        pm.response.to.have.status(501);\r",
							"    });\r",
							"}else if (status == 502){\r",
							"    pm.test(\"status code is 502 Bad Gateway\", function(){\r",
							"        pm.response.to.have.status(502);\r",
							"    });\r",
							"}else if (status == 503){\r",
							"    pm.test(\"status code is 503 Service unavailable\", function(){\r",
							"        pm.response.to.have.status(503);\r",
							"    });\r",
							"}else{\r",
							"    pm.test(\"Something Went Wrong.....\")\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Checking Booking After Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Fixed syntax for getting response data and added proper condition for handling 404 status\r",
							"var getdata = pm.response.text();\r",
							"\r",
							"var status = pm.response.code;\r",
							"if(status == 200){\r",
							"    pm.test(\"booking id validation\", function(){\r",
							"        pm.expect(getdata).to.eql(pm.environment.get(\"bookingid\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"firstname validation\", function(){\r",
							"        pm.expect(getdata).to.eql(pm.environment.get(\"firstname\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"lastname validation\", function(){\r",
							"        pm.expect(getdata).to.eql(pm.environment.get(\"lastname\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"totalprice validation\", function(){\r",
							"        pm.expect(getdata).to.eql(pm.environment.get(\"totalprice\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"depositpaid validation\", function(){\r",
							"        pm.expect(getdata).to.eql(pm.environment.get(\"depositpaid\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"checkin validation\", function(){\r",
							"        pm.expect(getdata).to.eql(pm.environment.get(\"checkin\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"checkout validation\", function(){\r",
							"        pm.expect(getdata).to.eql(pm.environment.get(\"checkout\"));\r",
							"    });\r",
							"\r",
							"    pm.test(\"additionalneeds validation\", function(){\r",
							"        pm.expect(getdata).to.eql(pm.environment.get(\"additionalneeds\"));\r",
							"    });\r",
							"} else {\r",
							"    pm.test(\"Status code is \" + status, function(){\r",
							"        pm.response.to.have.status(status);\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	]
}